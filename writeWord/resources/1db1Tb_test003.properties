mybatis.mapper-locations=classpath*:mybatis/mapper/*.xml,classpath:mybatis/ext-mapper/*.xml
mybatis.custom.interceptors[0]=com.psbc.dmf.dao.interceptor.AutoSwitchInterceptor
spring.shardingsphere.datasource.names=ds0,ds1
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=org.xxx.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:xxx://xxxipxxx:5432/demo_ds_0
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=password
spring.shardingsphere.datasource.ds0.max-active=3

spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=org.xxx.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:xxx://xxxipxxx:5432/demo_ds_1
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=password
spring.shardingsphere.datasource.ds1.max-active=3

#Test003 案例说明
#默认数据源|单表数据源与默认源是否相同|是否配置默认分片规则|测试案例号|正确配置才能实现
#有        |相同                      |配置了默认分片规则  |Test003   |配置单表规则,配到分片算法层

#ds1.pen 为单库单表
spring.shardingsphere.sharding.tables.pen.actual-data-nodes=ds1.pen
spring.shardingsphere.sharding.tables.pen.database-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.pen.database-strategy.inline.algorithm-expression=ds1
spring.shardingsphere.sharding.tables.pen.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.pen.table-strategy.inline.algorithm-expression=pen
#配置了默认分片规则
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{id % 2}
spring.shardingsphere.sharding.default-table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.default-table-strategy.inline.algorithm-expression=device_$->{id % 2}
spring.shardingsphere.sharding.default-data-source-name=ds1
spring.shardingsphere.props.sql.show=true





